// MEDIA QUERY MANAGER
/*
0 - 600px:      Phone
600 - 900px:    Tablet portrait
900 - 1200px:   Tablet landscape
[1200 - 1800] is where our normal styles apply
1800px + :      Big desktop
$breakpoint arguement choices:
- phone
- tab-port
- tab-land
- big-desktop

Inside media queries 1em is always 16px i.e 1em = 16px at every screen size only inside media queries
*/
@use "sass:math";
@use "sass:map";
@use "sass:color";

@mixin respond($breakpoint) {
  @if $breakpoint == phone {
    @media only screen and (max-width: 37.5em) {
      @content;
    } //600px
  }
  @if $breakpoint == tab-port {
    @media only screen and (max-width: 56.25em) {
      @content;
    } //900px
  }
  @if $breakpoint == tab-land {
    @media only screen and (max-width: 75em) {
      @content;
    } //1200px
  }
  @if $breakpoint == big-desktop {
    @media only screen and (min-width: 112.5em) {
      @content;
    } //1800
  }
}

@mixin secondaryFont {
  font-family: 'Overpass', sans-serif;
}

@function to-rgb($value) {
    @return color.channel($value, "red", $space: rgb), color.channel($value, "green", $space: rgb), color.channel($value, "blue", $space: rgb);
}

@function text-contrast($n, $lighter: #fff, $darker: #000) {
    $color-brightness: math.round((color.channel($n, "red", $space: rgb) * 299) + (color.channel($n, "green", $space: rgb) * 587) + math.div(color.channel($n, "blue", $space: rgb) * 114, 1000));
    $light-color: math.round((color.channel(#ffffff, "red", $space: rgb) * 299) + (color.channel(#ffffff, "green", $space: rgb) * 587) + math.div(color.channel(#ffffff, "blue", $space: rgb) * 114, 1000));

    @if math.abs($color-brightness) < math.div($light-color, 2) {
        @return $lighter;
    } @else {
        @return $darker;
    }
}

@function colour-difference($foreground, $background) {
    $r: (math.max(color.channel($foreground, "red", $space: rgb), color.channel($background, "red", $space: rgb))) - (math.min(color.channel($foreground, "red", $space: rgb), color.channel($background, "red", $space: rgb)));
    $g: (math.max(color.channel($foreground, "green", $space: rgb), color.channel($background, "green", $space: rgb))) - (math.min(color.channel($foreground, "green", $space: rgb), color.channel($background, "green", $space: rgb)));
    $b: (math.max(color.channel($foreground, "blue", $space: rgb), color.channel($background, "blue", $space: rgb))) - (math.min(color.channel($foreground, "blue", $space: rgb), color.channel($background, "blue", $space: rgb)));
    $sum-rgb: $r + $g + $b;

    @if $sum-rgb < 500 {
        @return 'false';
    } @else {
        @return 'true';
    }
}

@function contrast-ratio($background, $foreground) {
    $l1: luminance($background);
    $l2: luminance(opaque($background, $foreground));
    @return if($l1 > $l2, math.div($l1 + 0.05, $l2 + 0.05), math.div($l2 + 0.05, $l1 + 0.05));
}

// Return WCAG2.0 relative luminance
// See https://www.w3.org/WAI/GL/wiki/Relative_luminance
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance($color) {
    $rgb: (
        'r': color.channel($color, "red", $space: rgb),
        'g': color.channel($color, "green", $space: rgb),
        'b': color.channel($color, "blue", $space: rgb),
    );

    @each $name, $value in $rgb {
        $value: if(math.div($value, 255) < 0.03928, math.div(math.div($value, 255), 12.92), nth($_luminance-list, $value + 1));
        $rgb: map.merge(
            $rgb,
            (
                $name: $value,
            )
        );
    }

    @return (map.get($rgb, 'r') * 0.2126) + (map.get($rgb, 'g') * 0.7152) + (map.get($rgb, 'b') * 0.0722);
}

// Return opaque color
// opaque(#fff, rgba(0, 0, 0, .5)) => #808080
@function opaque($background, $foreground) {
    @return color.mix(color.change($foreground, $alpha: 1), $background, color.alpha($foreground) * 100%);
}

// Tint a color: mix a color with white
@function tint-color($color, $weight) {
    @return color.mix(white, $color, $weight);
}

// Shade a color: mix a color with black
@function shade-color($color, $weight) {
    @return color.mix(black, $color, $weight);
}

// Shade the color if the weight is positive, else tint it
@function shift-color($color, $weight) {
    @return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
}
